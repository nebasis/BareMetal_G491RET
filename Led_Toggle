/* The contents of this file can be used by other as they want , use VS code and cubmx to make the file as CMAKE with empty project and not generate the main file */

#include <stdint.h>

#define PERIPH_BASE         0x40000000UL
// Define the AHB2 bus for GPIOA
#define AHB2PERIPH_OFFSET   (0x08000000UL)
#define AHB2PERIPH_BASE     (PERIPH_BASE + AHB2PERIPH_OFFSET)
#define GPIOA_OFFSET        (0x0000)
 //Define the addr of GPIOA
#define GPIOA_BASE          (AHB2PERIPH_BASE + GPIOA_OFFSET)
 //Define the AHB1 bus for RCC 
#define AHB1PERIPH_OFFSET   (0x00020000UL)
#define AHB1PERIPH_BASE     (PERIPH_BASE + AHB1PERIPH_OFFSET)
 //Enable the bus to transport the clock for GPIOA RCC
#define RCC_OFFSET          (0x00001000UL)
#define RCC_BASE            (AHB1PERIPH_BASE + RCC_OFFSET)
 //Create RCC addr for AHB1 and AHB2 regs 
//AHB1 for RCC
#define AHB1EN_R_OFFSET     (0x48UL)
#define RCC_AHB1EN_R        (RCC_BASE + AHB1EN_R_OFFSET) 
//AHB2 for GPIOA
#define AHB2EN_R_OFFSET     (0x4CUL)
#define RCC_AHB2EN_R        (*(volatile uint32_t *)(RCC_BASE + AHB2EN_R_OFFSET))
// MODER reg for GPIOA
#define MODE_R_OFFSET       (0x00UL)
#define GPIOA_MODE_R        (*(volatile uint32_t *)(GPIOA_BASE + MODE_R_OFFSET))

#define OD_R_OFFSET         (0x14UL)
#define GPIOA_OD_R          (*(volatile uint32_t *)(GPIOA_BASE + OD_R_OFFSET))

//I have enabled both the buses since we require both of them for GPIO functioning
#define GPIOAEN             (1U<<0)//SHIFTS THE BIT AT POSITION 0 TO 1
//Find the reg in GPIOA that we have to work with we use DIRECTION AND DATA REG 
// DIRECTION - used to set the pin to input or output pin (MODE reg)
// DATA - If ip - the data is stored in the reg , op - pass it through the data reg 
//#define PIN5_CLEAR          ~(3UL<<10)                
#define PIN5                 (1U<<5)
#define LED_PIN              PIN5

int main(void)
{
    //Enable clock access to GPIOA
    RCC_AHB2EN_R |= GPIOAEN ;
    //Set PA5 as output pin
    GPIOA_MODE_R &= ~(1UL << 11); // Clears state of Bit 11 to 0 , since it was 1
    GPIOA_MODE_R |= (1UL << 10); // Sets state of bit 10 as 1 , even though it is 1
    
    while(1)
    {
        //Set PA5 High
        //GPIOA_OD_R |= LED_PIN;
        //Toggling PA5
        GPIOA_OD_R ^= LED_PIN; // Setting up the register for toggling
        for (int i = 0; i < 100000;i++){} // Time for LED blinking
    }
}
